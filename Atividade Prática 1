// Estados da encomenda
interface Status {
    fun avancar(encomenda: Encomenda)
}

class Recebida : Status {
    override fun avancar(encomenda: Encomenda) {
        encomenda.situacao = EmRota()
    }
}

class EmRota : Status {
    override fun avancar(encomenda: Encomenda) {
        encomenda.situacao = Entregue()
    }
}

class Entregue : Status {
    override fun avancar(encomenda: Encomenda) { }
}

// Encomenda
data class Encomenda(var situacao: Status)

// Estratégias de rastreio
interface Rastreamento {
    fun rastrear(encomenda: Encomenda)
}

class Basico : Rastreamento {
    override fun rastrear(encomenda: Encomenda) { }
}

class Avancado : Rastreamento {
    override fun rastrear(encomenda: Encomenda) { }
}

// Sistema de logística
class Logistica(var rastreio: Rastreamento) {
    fun processar(encomenda: Encomenda) {
        encomenda.situacao.avancar(encomenda)
    }

    fun rastrear(encomenda: Encomenda) {
        rastreio.rastrear(encomenda)
    }
}

// Uso
fun main() {
    val encomenda1 = Encomenda(Recebida())
    val sistema = Logistica(Basico())

    sistema.processar(e1) // Recebida -> EmRota
    sistema.processar(e1) // EmRota -> Entregue
    sistema.processar(e1) // Entregue

    sistema.rastreio = Avancado()
    sistema.rastrear(e1)
}
